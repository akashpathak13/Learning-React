rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is employee
    function isEmployee() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'employee';
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Users can read their own data, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create their own account during signup
      allow create: if isAuthenticated() && 
                       isOwner(userId) && 
                       request.resource.data.uid == request.auth.uid;
      
      // Users can update their own data (except role), admins can update any
      allow update: if (isOwner(userId) && 
                        request.resource.data.role == resource.data.role) || 
                       isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }
    
    // Tasks collection rules
    match /tasks/{taskId} {
      // Admins can read all tasks, employees can read only their assigned tasks
      allow read: if isAdmin() || 
                     (isEmployee() && resource.data.assignedTo == request.auth.uid);
      
      // Only admins can create tasks
      allow create: if isAdmin() && 
                       request.resource.data.keys().hasAll(['title', 'assignedTo', 'status']) &&
                       request.resource.data.assignedTo is string &&
                       request.resource.data.status in ['pending', 'in-progress', 'completed'] &&
                       request.resource.data.priority in ['low', 'medium', 'high'];
      
      // Admins can update any task, employees can only update status of their assigned tasks
      allow update: if isAdmin() || 
                       (isEmployee() && 
                        resource.data.assignedTo == request.auth.uid &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'completedAt']) &&
                        request.resource.data.status in ['pending', 'in-progress', 'completed']);
      
      // Only admins can delete tasks
      allow delete: if isAdmin();
    }
    
    // Deny access to all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}